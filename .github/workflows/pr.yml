name: PR Quality Gate

on:
  pull_request:
    branches: [main, develop]

jobs:
  pr-policies:
    name: PR Policy Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate PR Title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            release/
          requireScope: false

      - name: Check PR has description
        uses: actions/github-script@v6
        with:
          script: |
            const pr = context.payload.pull_request;
            if (!pr.body || pr.body.trim().length < 10) {
              core.setFailed('❌ PR must have a description with at least 10 characters');
            } else {
              core.info('✅ PR has adequate description');
            }

      - name: Check PR is not draft
        uses: actions/github-script@v6
        with:
          script: |
            const pr = context.payload.pull_request;
            if (pr.draft) {
              core.setFailed('❌ Cannot merge draft PRs');
            } else {
              core.info('✅ PR is ready for review');
            }

      - name: Check branch naming convention
        uses: actions/github-script@v6
        with:
          script: |
            const branchName = context.payload.pull_request.head.ref;
            const validPrefixes = ['feature/', 'fix/', 'hotfix/', 'docs/', 'refactor/', 'test/', 'chore/'];

            const isValid = validPrefixes.some(prefix => branchName.startsWith(prefix));

            if (!isValid) {
              core.setFailed(`❌ Branch name "${branchName}" doesn't follow naming convention. Use: ${validPrefixes.join(', ')}`);
            } else {
              core.info(`✅ Branch name "${branchName}" follows naming convention`);
            }

      - name: Require approving review
        uses: actions/github-script@v6
        with:
          script: |
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            const approvedReviews = reviews.filter(review => review.state === 'APPROVED');
            const author = context.payload.pull_request.user.login;
            const approversExcludingAuthor = approvedReviews.filter(review => review.user.login !== author);

            if (approversExcludingAuthor.length === 0) {
              core.setFailed('❌ PR requires at least 1 approving review from a contributor (not the author)');
            } else {
              core.info(`✅ PR has ${approversExcludingAuthor.length} approving review(s) from contributors`);
            }
