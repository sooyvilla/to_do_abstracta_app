// Mocks generated by Mockito 5.4.5 from annotations
// in to_do_abstracta_app/test/presentation/pages/task_detail_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:to_do_abstracta_app/domain/entities/task.dart' as _i4;
import 'package:to_do_abstracta_app/domain/usecases/llm_usecases.dart' as _i5;
import 'package:to_do_abstracta_app/domain/usecases/task_usecases.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskStatistics_0 extends _i1.SmartFake
    implements _i2.TaskStatistics {
  _FakeTaskStatistics_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskUsecases].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskUsecases extends _i1.Mock implements _i2.TaskUsecases {
  MockTaskUsecases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Task>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
      ) as _i3.Future<List<_i4.Task>>);

  @override
  _i3.Future<_i4.Task?> getTaskById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [id],
        ),
        returnValue: _i3.Future<_i4.Task?>.value(),
      ) as _i3.Future<_i4.Task?>);

  @override
  _i3.Future<void> createTask(_i4.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [task],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateTask(_i4.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteTask(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> toggleTaskStatus(String? id) => (super.noSuchMethod(
        Invocation.method(
          #toggleTaskStatus,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i2.TaskStatistics> getTaskStatistics() => (super.noSuchMethod(
        Invocation.method(
          #getTaskStatistics,
          [],
        ),
        returnValue: _i3.Future<_i2.TaskStatistics>.value(_FakeTaskStatistics_0(
          this,
          Invocation.method(
            #getTaskStatistics,
            [],
          ),
        )),
      ) as _i3.Future<_i2.TaskStatistics>);

  @override
  _i3.Stream<List<_i4.Task>> watchTasks() => (super.noSuchMethod(
        Invocation.method(
          #watchTasks,
          [],
        ),
        returnValue: _i3.Stream<List<_i4.Task>>.empty(),
      ) as _i3.Stream<List<_i4.Task>>);

  @override
  _i3.Future<List<_i4.Task>> searchTasks(String? query) => (super.noSuchMethod(
        Invocation.method(
          #searchTasks,
          [query],
        ),
        returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
      ) as _i3.Future<List<_i4.Task>>);
}

/// A class which mocks [LLMUsecases].
///
/// See the documentation for Mockito's code generation for more information.
class MockLLMUsecases extends _i1.Mock implements _i5.LLMUsecases {
  MockLLMUsecases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConfigured => (super.noSuchMethod(
        Invocation.getter(#isConfigured),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<String> generateTaskDescription(String? prompt) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateTaskDescription,
          [prompt],
        ),
        returnValue: _i3.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #generateTaskDescription,
            [prompt],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<List<String>> generateTaskTags(
    String? title,
    String? description,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateTaskTags,
          [
            title,
            description,
          ],
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);
}
